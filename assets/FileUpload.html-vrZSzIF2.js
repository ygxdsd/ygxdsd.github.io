import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as l,d as i,a as n,b as s,f as t,e}from"./app-PF0dnShz.js";const u={},r=n("p",null,[n("code",null,"more"),s(" 使用Element组件或者Ajax请求进行文件传输")],-1),k=e(`<h3 id="前端-后端" tabindex="-1"><a class="header-anchor" href="#前端-后端" aria-hidden="true">#</a> 前端 -&gt; 后端</h3><p>1：编写Ajax请求</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>	<span class="token comment">// 文件传输</span>
	<span class="token comment">// 创建了一个新的FormDate对象</span>
      <span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 将传入的文件添加到新创建的formData里面</span>
      <span class="token comment">// \`file.raw\`通常表示一个文件对象或文件的原始数据</span>
      formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;file&quot;</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span> 
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$http</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/device/batchSave&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;Post&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> formData<span class="token punctuation">,</span>
        <span class="token comment">// 选择安全策略为same-origin</span>
        <span class="token comment">// 用于跨域请求的场景，确保在跨域请求中不会携带敏感的凭据信息，从而增强安全性。</span>
        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token string">&quot;same-origin&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),d={href:"https://blog.csdn.net/aigoogle/article/details/122420491",target:"_blank",rel:"noopener noreferrer"},m=e(`<blockquote><p>浏览器普遍使用origin来表示权限范围。</p><p>其中判断同源的方法是根据scheme（协议）、host（主机名）和port（端口号）</p><p>scheme：http和https是协议</p><p>host：<code>http://www.example.com</code>中的主机名是<code>www.example.com</code> <code>http://127.0.0.1</code>中的主机名是<code>127.0.0.1</code></p><p>port：端口号是：后面跟着的数字，默认浏览器的端口是80</p><p>same-origin就是限制不同源之间的资源访问</p></blockquote><p><strong>Same-Origin同源策略</strong></p><ul><li><strong>资源访问</strong>：同源策略限制了一个网页从不同源加载的资源（比如脚本、样式表、图片、iframe等）。例如，一个网页只能通过Ajax从相同源的服务器获取数据。</li><li><strong>Cookie和LocalStorage</strong>：同源策略阻止一个网页从一个不同源的页面读取或设置Cookie值，或者访问本地存储（如LocalStorage）。</li><li><strong>DOM访问</strong>：同源策略也限制了一个网页对另一个不同源的页面的DOM对象的访问。</li><li><strong>通信方式</strong>：同源策略还限制了通过一些通信方式（如WebSocket、WebRTC等）进行跨源通信。</li></ul><p>2：后端接收使用MultipartFile对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/batchSave&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">batchSave</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
	retrun <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>MultipartFile对象</strong></p><blockquote><p><code>MultipartFile</code> 是 Spring 框架中用于表示文件上传的接口。</p><p>将<code>MultipartFile</code>对象作为参数，Spring会自动将上传的文件数据封装为<code>MultipartFile</code>对象并传递给方法，从而方便我们进行文件上传操作。</p><p>这个接口提供了一系列方法，用于获取文件名、文件大小、文件内容等信息</p></blockquote><table><thead><tr><th style="text-align:center;">方法</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>String getContentType()</code></td><td style="text-align:center;">获取文件的内容类型</td></tr><tr><td style="text-align:center;"><code>String getName()</code></td><td style="text-align:center;">获取文件参数的名称</td></tr><tr><td style="text-align:center;"><code>String getOriginalFilename()</code></td><td style="text-align:center;">获取上传文件的原始文件名</td></tr><tr><td style="text-align:center;"><code>long getSize()</code></td><td style="text-align:center;">获取上传文件的大小</td></tr><tr><td style="text-align:center;"><code>byte[] getBytes()</code></td><td style="text-align:center;">以字节数组的形式返回文件的内容</td></tr><tr><td style="text-align:center;"><code>InputStream getInputStream()</code></td><td style="text-align:center;">获取包含文件内容的输入流</td></tr><tr><td style="text-align:center;"><code>void transferTo(File dest)</code></td><td style="text-align:center;">将文件内容以字节形式保存到目标文件中</td></tr></tbody></table><h3 id="后端-前端" tabindex="-1"><a class="header-anchor" href="#后端-前端" aria-hidden="true">#</a> 后端 -&gt; 前端</h3><p>1：在Controller层使用新参的自动装配获取到HttpServletResponse（响应体），并设置响应体的对应设置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/uploads/template&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">template</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> tempDir <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;java.io.tmpdir&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token string">&quot;template.xlsx&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> filePath <span class="token operator">=</span> tempDir <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> fileName<span class="token punctuation">;</span>
        <span class="token class-name"><span class="token namespace">iDeviceService<span class="token punctuation">.</span></span>POTemplate</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置响应体内容为二进制的数据，不需要特殊的解释</span>
        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;application/octet-stream&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 编码格式为UTF-8</span>
        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置响应头，告诉客户端以附件的方式处理接收到的数据，指定了文件名为\`template.xlsx\`，浏览器接收到后，会自动进行下载</span>
        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Disposition&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;attachment; filename=\\&quot;template.xlsx\\&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token comment">// 接下来是将生成的Excel文件内容读取并写入到HTTP响应的输出流中</span>
             <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//这里创建了一个大小为4096字节的字节数组作为缓冲区</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 记录每次从文件输入流中实际读取的字节数。</span>
            <span class="token keyword">int</span> length<span class="token punctuation">;</span>
            <span class="token comment">// 从文件输入流中读取数据到缓冲区\`buffer\`中，并将读取的字节数赋值给\`length\`，当读取到文件末尾时，\`in.read(buffer)\`会返回-1，循环就会结束。</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>length <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">// 这一行代码将缓冲区\`buffer\`中的数据写入到输出流\`out\`中，只写入实际读取的字节数\`length\`，避免写入多余的空白字节。</span>
                out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 删除生成的临时文件</span>
        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2：前端接收，接收到的是blob。然后创建一个A标签。模拟点击并释放</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$<span class="token function">http</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          url<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">adornUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/device/uploads/template&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          method<span class="token operator">:</span> <span class="token string">&quot;Get&quot;</span><span class="token punctuation">,</span>
          <span class="token comment">// 重点，设置响应的类型 </span>
    	  <span class="token comment">// 响应类型为 blob 包含二进制数据的 Blob 对象</span>
          responseType<span class="token operator">:</span> <span class="token string">&quot;blob&quot;</span><span class="token punctuation">,</span> 
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> url <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>response<span class="token punctuation">.</span>data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个 URL 对象</span>
          <span class="token keyword">const</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          link<span class="token punctuation">.</span>href <span class="token operator">=</span> url<span class="token punctuation">;</span>
          link<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;download&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;template.xlsx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置下载文件的文件名</span>
          document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>
          link<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 模拟点击链接进行下载</span>
          window<span class="token punctuation">.</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放 URL 对象</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>$<span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            message<span class="token operator">:</span> <span class="token string">&quot;操作成功&quot;</span><span class="token punctuation">,</span>
            type<span class="token operator">:</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span>
            duration<span class="token operator">:</span> <span class="token number">1500</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),v={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/responseType",target:"_blank",rel:"noopener noreferrer"};function b(g,h){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,i(" more "),k,n("p",null,[n("a",d,[s("深入理解Same-Origin安全机制CSDN博客"),t(a)])]),m,n("p",null,[n("a",v,[s("responseType类型的官方文档"),t(a)])])])}const q=p(u,[["render",b],["__file","FileUpload.html.vue"]]);export{q as default};
