import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o,c as i,d as r,a as s,f as c,w as p,b as a,e as n}from"./app-xS5i7JKJ.js";const u="/assets/image-20240301160327977-ftNRnVIo.png",d="/assets/image-20240301162317425-Q8Ba6AZE.png",k={},v=s("p",null,[s("code",null,"more"),a(" 对于实现Iservice和的BaseMaper的一些个人理解")],-1),m=n('<p><strong>IService</strong>和<strong>BaseMaper</strong>作为Mybatis-plus核心的接口，在Springboot项目中。因为三层架构设计模式，分为数据层，逻辑层，显示层。</p><p><strong>在数据层 <code>dao</code>层中</strong>，可以使用<code>BaseMaper</code>接口。可以为实体类自动创建对应的数据操作方法，Mybatis-plus会提供一组通用的CRUD（创建、读取、更新、删除）方法。</p><figure><img src="'+u+'" alt="image-20240301160327977" tabindex="0" loading="lazy"><figcaption>image-20240301160327977</figcaption></figure><p><strong>在逻辑层 service层中</strong> ， 可以使用IService 接口进行创建，主要作用是定义业务层的服务方法，例如对多个表进行操作时的事务管理、业务逻辑的处理等。</p><figure><img src="'+d+'" alt="Iservice方法" tabindex="0" loading="lazy"><figcaption>Iservice方法</figcaption></figure>',5),g=n(`<h3 id="basemaper的使用" tabindex="-1"><a class="header-anchor" href="#basemaper的使用" aria-hidden="true">#</a> BaseMaper的使用</h3><p>BaseMaper 接口是 MyBatis-Plus 提供的通用 Mapper 接口，它继承自 mybatis-plus 的 Mapper 接口，并扩展了一些常用的数据库操作方法。</p><ul><li>通用 CRUD 封装 <code>BaseMapper</code> 接口，为 <code>Mybatis-Plus</code> 启动时自动解析实体表关系映射转换为 <code>Mybatis</code> 内部对象注入容器</li><li>泛型 <code>T</code> 为任意实体对象</li><li>参数 <code>Serializable</code> 为任意类型主键 <code>Mybatis-Plus</code> 不推荐使用复合主键约定每一张表都有自己的唯一 <code>id</code> 主键</li><li>对象 <code>Wrapper</code> 为 <code>条件构造器</code></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeviceMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Device</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// 查看关注设备</span>
    <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Device</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAllFocus</span><span class="token punctuation">(</span><span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Device</span><span class="token punctuation">&gt;</span></span> page<span class="token punctuation">,</span> <span class="token class-name">Long</span> <span class="token class-name">Userid</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),b=s("p",null,"1：自定义Mapper接口不要忘记加上@Mapper注解",-1),_=s("p",null,[a("2：泛型为实体类对象，自动映射出对数据库操作的CRUD方法。不推荐使用复合主键约定每一张表都有自己的唯一 "),s("code",null,"id"),a(" 主键")],-1),h=s("p",null,[a("3：自定义SQL可以在Mapper方法中，自定义方法。进行编写。代码中的"),s("code",null,"selectAllFocus"),a("方法就是自定义SQL语句。")],-1),M=n(`<h3 id="iservice-的使用" tabindex="-1"><a class="header-anchor" href="#iservice-的使用" aria-hidden="true">#</a> IService 的使用</h3><p>IService 接口是 MyBatis-Plus 提供的通用 Service 接口。</p><p>手动在自己创建的Service层接口，继承 IService 接口。并且指定对应的实体类，进行自动装配。以下实例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDeviceService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Device</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// 需要实现的方法</span>
    <span class="token comment">/*
    * 获取全部设备信息信息，分页查询
    * */</span>
    <span class="token class-name">PageUtils</span> <span class="token function">queryPage</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>定义了一个IDeviceService的接口，<code>继承了IService&lt;Device&gt;接口</code>。Device是对应的实体类</p></blockquote><h3 id="serviceimpl" tabindex="-1"><a class="header-anchor" href="#serviceimpl" aria-hidden="true">#</a> <strong>ServiceImpl</strong></h3><p>ServiceImpl是 IService 默认实现类，ServiceImpl 是针对业务逻辑层的实现，并调用 BaseMapper 来操作数据库。</p><p>创建接口后，需要对接口进行实现。如果没有继承ServiceImpl类的话，需要自己实现<code>IDeviceService</code>接口。也就是继承了IService 接口的接口。**可以通过继承ServiceImpl&lt;T,V&gt; **</p><ul><li>M：Mapper 接口类型</li><li>T：对应实体类的类型</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeviceServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DeviceMapper</span><span class="token punctuation">,</span> <span class="token class-name">Device</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">IDeviceService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">PageUtils</span> <span class="token function">queryPage</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageUtils</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>BaseMapper 和 IService 主要区别： IService 提供批量处理操作（IService 和 BaseMapper 需一起使用），BaseMapper 则没有；</strong></p>`,11);function S(I,y){const e=l("RouterLink");return o(),i("div",null,[v,r(" more "),m,s("p",null,[c(e,{to:"/blog/MyBatis-plus_comprehend.html"},{default:p(()=>[a("两个核心接口方法运用")]),_:1})]),g,s("blockquote",null,[b,_,h,s("p",null,[c(e,{to:"/blog/Mybatis_xml.html"},{default:p(()=>[a("自定义SQL语句")]),_:1})])]),M])}const w=t(k,[["render",S],["__file","MyabtisIservice.html.vue"]]);export{w as default};
