import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as s,d as a,a as t,b as l,e as r}from"./app-bbNYsfF-.js";const p={},i=t("hr",null,null,-1),o=t("p",null,[t("code",null,"more"),l(" MybatisPlus中QueryWrapper常用方法")],-1),d=r(`<p>QueryWrapper 是 Mybatis-Plus 提供的一个强大的查询条件构造器，可以帮助你轻松构建灵活的查询条件，实现复杂的查询操作。</p><table><thead><tr><th style="text-align:left;">函数</th><th style="text-align:center;">说明</th><th style="text-align:left;">例子</th></tr></thead><tbody><tr><td style="text-align:left;">eq</td><td style="text-align:center;">等于(=)</td><td style="text-align:left;">queryWrapper.eq(“user_name”, “张三”); //user_name=“张三”</td></tr><tr><td style="text-align:left;">ne</td><td style="text-align:center;">不等于(&lt;&gt;)</td><td style="text-align:left;">queryWrapper.ne(“user_name”, “张三”); //user_name&lt;&gt;“张三”</td></tr><tr><td style="text-align:left;">gt</td><td style="text-align:center;">大于(&gt;)</td><td style="text-align:left;">queryWrapper.gt(“level”, 1); //level&gt;1</td></tr><tr><td style="text-align:left;">ge</td><td style="text-align:center;">大于等于(&gt;=)</td><td style="text-align:left;">queryWrapper.ge(“level”, 1); //level&gt;=1</td></tr><tr><td style="text-align:left;">lt</td><td style="text-align:center;">小于(&lt;)</td><td style="text-align:left;">queryWrapper.lt(“level”, 1); //level&lt;1</td></tr><tr><td style="text-align:left;">le</td><td style="text-align:center;">小于等于(&lt;=)</td><td style="text-align:left;">queryWrapper.le(“level”, 1); //level&lt;=1</td></tr><tr><td style="text-align:left;">between</td><td style="text-align:center;">值1和值2之间</td><td style="text-align:left;">queryWrapper.between(“level”, 1,10); //level&gt;=1 and level &lt;=10</td></tr><tr><td style="text-align:left;">notBetween</td><td style="text-align:center;">不在值1和值2之间</td><td style="text-align:left;">queryWrapper.notBetween(“level”, 1,10);//level&lt;1 or level &gt;10</td></tr><tr><td style="text-align:left;">like</td><td style="text-align:center;">模糊匹配 like %值%</td><td style="text-align:left;">queryWrapper.like(“user_name”, “张三”); //user_name like “%张三%”</td></tr><tr><td style="text-align:left;">isNull</td><td style="text-align:center;">字段 为空</td><td style="text-align:left;">queryWrapper.isNull(“user_name”);//user_name is null</td></tr><tr><td style="text-align:left;">isNotNull</td><td style="text-align:center;">字段 不为空</td><td style="text-align:left;">queryWrapper.isNotNull(“user_name”);//user_name is not null</td></tr><tr><td style="text-align:left;">in</td><td style="text-align:center;">字段 in (v0，v1，…)</td><td style="text-align:left;">queryWrapper.in(“user_name”, {“张三”,“李四”,“王五”}); // user_name in （“张三”,“李四”,“王五”）</td></tr><tr><td style="text-align:left;">or</td><td style="text-align:center;">拼接 OR</td><td style="text-align:left;">说明:主动调用or表示紧接着下一个方法不是用and连接!(不调用or则默认为使用and连接);queryWrapper.eq(“id”, “1”).or().eq(“user_name”, “张三”); //id = 1 or name =‘张三’</td></tr><tr><td style="text-align:left;">and</td><td style="text-align:center;">拼接 AND</td><td style="text-align:left;">queryWrapper.eq(“id”, “1”).and(i-&gt;i.eq(“user_name”, “张三”)); //id = 1 and name =‘张三’</td></tr></tbody></table><p><strong>实际运用</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;New%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function c(u,g){return n(),s("div",null,[i,o,a(" more "),d])}const x=e(p,[["render",c],["__file","QueryWrapper.html.vue"]]);export{x as default};
